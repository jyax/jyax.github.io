<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/index.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-01-28T11:01:18-05:00</updated><id>http://localhost:4000/index.xml</id><title type="html">Redron - Jekyll Premium Theme</title><subtitle>Redron is a responsive Jekyll template for your business website</subtitle><entry><title type="html">Creative design clients response is better</title><link href="http://localhost:4000/tips/tech/2019/02/09/creative-design-clients-response.html" rel="alternate" type="text/html" title="Creative design clients response is better" /><published>2019-02-09T09:37:13-05:00</published><updated>2019-02-09T09:37:13-05:00</updated><id>http://localhost:4000/tips/tech/2019/02/09/creative-design-clients-response</id><content type="html" xml:base="http://localhost:4000/tips/tech/2019/02/09/creative-design-clients-response.html"><![CDATA[<p>But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself. because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure</p>
<blockquote>
      <p>Consultations are slowly gaining immense recognition and are growing phenomenally with more and more people trading with this digital currency. The universal acceptance of Constation. pursue pleasure rationally encounter</p>
  </blockquote>
<p> because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure.</p>
<h4>With more and more people trading with this digital </h4>
<p>But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness.</p>
<div class="img-blog left-blog-img">
      <img src="/assets/img/blog/b3.jpg" alt="" />
  </div>
<div class="img-blog right-blog-img">
      <img src="/assets/img/blog/b4.jpg" alt="" />
  </div>
<p>But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful.</p>]]></content><author><name></name></author><category term="tips" /><category term="tech" /><category term="technology" /><category term="education" /><summary type="html"><![CDATA[But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself. because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure Consultations are slowly gaining immense recognition and are growing phenomenally with more and more people trading with this digital currency. The universal acceptance of Constation. pursue pleasure rationally encounter because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. With more and more people trading with this digital But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful.]]></summary></entry><entry><title type="html">Easily choose from thousan of free themes</title><link href="http://localhost:4000/tips/tech/2019/02/09/free-themes.html" rel="alternate" type="text/html" title="Easily choose from thousan of free themes" /><published>2019-02-09T09:37:13-05:00</published><updated>2019-02-09T09:37:13-05:00</updated><id>http://localhost:4000/tips/tech/2019/02/09/free-themes</id><content type="html" xml:base="http://localhost:4000/tips/tech/2019/02/09/free-themes.html"><![CDATA[<p>But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself. because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure</p>
<blockquote>
      <p>Consultations are slowly gaining immense recognition and are growing phenomenally with more and more people trading with this digital currency. The universal acceptance of Constation. pursue pleasure rationally encounter</p>
  </blockquote>
<p> because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure.</p>
<h4>With more and more people trading with this digital </h4>
<p>But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness.</p>
<div class="img-blog left-blog-img">
      <img src="/assets/img/blog/b3.jpg" alt="" />
  </div>
<div class="img-blog right-blog-img">
      <img src="/assets/img/blog/b4.jpg" alt="" />
  </div>
<p>But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful.</p>]]></content><author><name></name></author><category term="tips" /><category term="tech" /><category term="technology" /><category term="education" /><summary type="html"><![CDATA[But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself. because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure Consultations are slowly gaining immense recognition and are growing phenomenally with more and more people trading with this digital currency. The universal acceptance of Constation. pursue pleasure rationally encounter because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. With more and more people trading with this digital But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful.]]></summary></entry><entry><title type="html">Alternative Free Way To Be A Prodessional Designer</title><link href="http://localhost:4000/tech/2019/02/09/alternative-for-free.html" rel="alternate" type="text/html" title="Alternative Free Way To Be A Prodessional Designer" /><published>2019-02-09T09:37:13-05:00</published><updated>2019-02-09T09:37:13-05:00</updated><id>http://localhost:4000/tech/2019/02/09/alternative-for-free</id><content type="html" xml:base="http://localhost:4000/tech/2019/02/09/alternative-for-free.html"><![CDATA[<p>But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself. because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure</p>
<blockquote>
      <p>Consultations are slowly gaining immense recognition and are growing phenomenally with more and more people trading with this digital currency. The universal acceptance of Constation. pursue pleasure rationally encounter</p>
  </blockquote>
<p> because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure.</p>
<h4>With more and more people trading with this digital </h4>
<p>But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness.</p>
<div class="img-blog left-blog-img">
      <img src="/assets/img/blog/b3.jpg" alt="" />
  </div>
<div class="img-blog right-blog-img">
      <img src="/assets/img/blog/b4.jpg" alt="" />
  </div>
<p>But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful.</p>]]></content><author><name></name></author><category term="tech" /><category term="technology" /><category term="education" /><summary type="html"><![CDATA[But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself. because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure Consultations are slowly gaining immense recognition and are growing phenomenally with more and more people trading with this digital currency. The universal acceptance of Constation. pursue pleasure rationally encounter because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. With more and more people trading with this digital But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful.]]></summary></entry><entry><title type="html">Seo Friendly Post Title venenatis a condimentum vitae</title><link href="http://localhost:4000/health/2019/02/01/seo-friendly-post.html" rel="alternate" type="text/html" title="Seo Friendly Post Title venenatis a condimentum vitae" /><published>2019-02-01T09:37:13-05:00</published><updated>2019-02-01T09:37:13-05:00</updated><id>http://localhost:4000/health/2019/02/01/seo-friendly-post</id><content type="html" xml:base="http://localhost:4000/health/2019/02/01/seo-friendly-post.html"><![CDATA[<p>But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself. because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure</p>
<blockquote>
      <p>Consultations are slowly gaining immense recognition and are growing phenomenally with more and more people trading with this digital currency. The universal acceptance of Constation. pursue pleasure rationally encounter</p>
  </blockquote>
<p> because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure.</p>
<h4>With more and more people trading with this digital </h4>
<p>But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness.</p>
<div class="img-blog left-blog-img">
      <img src="/assets/img/blog/b3.jpg" alt="" />
  </div>
<div class="img-blog right-blog-img">
      <img src="/assets/img/blog/b4.jpg" alt="" />
  </div>
<p>But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful.</p>]]></content><author><name></name></author><category term="health" /><category term="technology" /><category term="education" /><summary type="html"><![CDATA[But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself. because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure Consultations are slowly gaining immense recognition and are growing phenomenally with more and more people trading with this digital currency. The universal acceptance of Constation. pursue pleasure rationally encounter because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. With more and more people trading with this digital But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful.]]></summary></entry><entry><title type="html">Syntax highlight with jekyll</title><link href="http://localhost:4000/jekyll/highlight/2019/01/17/syntax-highlight-with-jekyll.html" rel="alternate" type="text/html" title="Syntax highlight with jekyll" /><published>2019-01-17T07:51:30-05:00</published><updated>2019-01-17T07:51:30-05:00</updated><id>http://localhost:4000/jekyll/highlight/2019/01/17/syntax-highlight-with-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/highlight/2019/01/17/syntax-highlight-with-jekyll.html"><![CDATA[<h1>Markup</h1>
<p>To use this language, use one of the following classes:</p>
<ul>
  <li><code class=" language-none">"language-markup"</code></li>
  <li><code class=" language-none">"language-html"</code></li>
  <li><code class=" language-none">"language-xml"</code></li>
  <li><code class=" language-none">"language-svg"</code></li>
  <li><code class=" language-none">"language-mathml"</code></li>
  <li><code class=" language-none">"language-ssml"</code></li>
  <li><code class=" language-none">"language-atom"</code></li>
  <li><code class=" language-none">"language-rss"</code></li>
</ul>
<h2>Empty tag</h2>
<pre class=" language-markup"><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></code></pre>
<h2>Tag that spans multiple lines</h2>
<pre class=" language-markup"><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span>
<span class="token punctuation">&gt;</span></span>hello!
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></code></pre>
<h2>Name-attribute pair</h2>
<pre class=" language-markup"><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></code></pre>
<h2>Name-attribute pair without quotes</h2>
<pre class=" language-markup"><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>prism</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></code></pre>

<h2>Attribute without value</h2>
<pre class=" language-markup"><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">data-foo</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">data-foo</span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre>

<h2>Namespaces</h2>
<pre class=" language-markup"><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">html:</span>p</span> <span class="token attr-name"><span class="token namespace">foo:</span>bar</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>baz<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">foo:</span>weee</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">html:</span>p</span><span class="token punctuation">&gt;</span></span></code></pre>

<h2>XML prolog</h2>
<pre class=" language-markup"><code class=" language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span></code></pre>
<h2>DOCTYPE</h2>
<pre class=" language-markup"><code class=" language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></code></pre>

<h2>CDATA section</h2>
<pre class=" language-markup"><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">ns1:</span>description</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[
  CDATA is &lt;not&gt; magical.
]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">ns1:</span>description</span><span class="token punctuation">&gt;</span></span></code></pre>
<h2>Comment</h2>
<pre class=" language-markup"><code class=" language-markup"><span class="token comment">&lt;!-- I'm a comment --&gt;</span>
And i'm not</code></pre>

<h2>Entities</h2>
<pre class=" language-markup"><code class=" language-markup"><span class="token entity named-entity" title="&amp;">&amp;amp;</span> <span class="token entity" title="♥">&amp;#x2665;</span> <span class="token entity" title="&nbsp;">&amp;#160;</span> <span class="token entity" title="Œ">&amp;#x152;</span></code></pre>
<h2>Embedded JS and CSS</h2>
<pre class=" language-markup"><code class=" language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>I can haz embedded CSS and JS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token atrule"><span class="token rule">@media</span> print</span> <span class="token punctuation">{</span>
      <span class="token selector">p</span> <span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> red <span class="token important">!important</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>I can haz embedded CSS and JS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></code></pre>
<h2>Invalid HTML</h2>
<pre class=" language-markup"><code class=" language-markup">&lt;l <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></code></pre>
<h2>Multi-line attribute values</h2>
<pre class=" language-markup"><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>foo
bar
baz<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></code></pre>
<h2>XML tags with non-ASCII characters</h2>
<pre class=" language-markup"><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Läufer</span><span class="token punctuation">&gt;</span></span>foo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Läufer</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tag</span> <span class="token attr-name">läufer</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>läufer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>bar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tag</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">läufer:</span>tag</span><span class="token punctuation">&gt;</span></span>baz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">läufer:</span>tag</span><span class="token punctuation">&gt;</span></span></code></pre>]]></content><author><name></name></author><category term="Jekyll" /><category term="Highlight" /><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Markup To use this language, use one of the following classes: "language-markup" "language-html" "language-xml" "language-svg" "language-mathml" "language-ssml" "language-atom" "language-rss" Empty tag &lt;p&gt;&lt;/p&gt; Tag that spans multiple lines &lt;p &gt;hello! &lt;/p&gt; Name-attribute pair &lt;p&gt;&lt;/p&gt; Name-attribute pair without quotes &lt;p class=prism&gt;&lt;/p&gt;]]></summary></entry><entry><title type="html">The holding named diet present switching location</title><link href="http://localhost:4000/busyness/finance/2018/12/05/the-holding-named-diet-present-switching-stitching-location.html" rel="alternate" type="text/html" title="The holding named diet present switching location" /><published>2018-12-05T21:14:30-05:00</published><updated>2018-12-05T21:14:30-05:00</updated><id>http://localhost:4000/busyness/finance/2018/12/05/the-holding-named-diet-present-switching-stitching-location</id><content type="html" xml:base="http://localhost:4000/busyness/finance/2018/12/05/the-holding-named-diet-present-switching-stitching-location.html"><![CDATA[<p>Jekyll is a simple, blog-aware, static site generator. It takes a template directory containing raw text files in
  various formats, runs it through a converter (like Markdown) and our Liquid renderer, and spits out a complete,
  ready-to-publish static website suitable for serving with your favorite web server.</p>
<p>If you already have a full Ruby development environment with all headers and RubyGems installed, you can create a new
  Jekyll site by doing the following:</p>
<h2 id="how-to-install">How to install<a href="#how-to-install" class="header-link">#</a></h2>
<pre class=" language-javascript">		<code class=" language-javascript">
  # Install Jekyll and Bundler gems through RubyGems
  <span class="token operator">~</span> $ gem install jekyll bundler
  
  # Create a <span class="token keyword">new</span> <span class="token class-name">Jekyll</span> site at <span class="token punctuation">.</span><span class="token operator">/</span>myblog
  <span class="token operator">~</span> $ jekyll <span class="token keyword">new</span> <span class="token class-name">myblog</span>
  
  # Change into your <span class="token keyword">new</span> <span class="token class-name">directory</span>
  <span class="token operator">~</span> $ cd myblog
  
  # Build the site on the preview server
  <span class="token operator">~</span><span class="token operator">/</span>myblog $ bundle exec jekyll serve
  
  # Now browse to http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">4000</span>
</code>	  </pre>
<h2 id="next-steps">Next steps<a href="#next-steps" class="header-link">#</a></h2>
<p>Building a Jekyll site with the default theme is just the first step. The real magic happens when you start creating
  blog posts, using the front matter to control templates and layouts, and taking advantage of all the awesome
  configuration options Jekyll makes available.</p>
<h2 id="basic-usage">Basic usage<a href="#basic-usage" class="header-link">#</a></h2>
<p>The Jekyll gem makes a <code class=" highlighter-rouge language-plaintext">jekyll</code> executable available to you
  in your Terminal window. You can use this command in a number of ways:</p>
<h2 id="directory-structure">Directory structure<a href="#directory-structure" class="header-link">#</a></h2>
<p>Jekyll is, at its core, a text transformation engine. The concept behind the system is this: you give it text written
  in your favorite markup language, be that Markdown, Textile, or just plain HTML, and it churns that through a layout
  or a series of layout files. Throughout that process you can tweak how you want the site URLs to look, what data
  gets displayed in the layout, and more. This is all done through editing text files; the static web site is the
  final product.</p>
<p>A basic Jekyll site usually looks something like this:</p>
<pre class=" language-javascript">		<code class=" language-javascript">
├── _config<span class="token punctuation">.</span>yml
├── _data
<span class="token operator">|</span>   └── members<span class="token punctuation">.</span>yml
├── _drafts
<span class="token operator">|</span>   ├── begin<span class="token operator">-</span><span class="token keyword">with</span><span class="token operator">-</span>the<span class="token operator">-</span>crazy<span class="token operator">-</span>ideas<span class="token punctuation">.</span>md
<span class="token operator">|</span>   └── on<span class="token operator">-</span>simplicity<span class="token operator">-</span><span class="token keyword">in</span><span class="token operator">-</span>technology<span class="token punctuation">.</span>md
├── _includes
<span class="token operator">|</span>   ├── footer<span class="token punctuation">.</span>html
<span class="token operator">|</span>   └── header<span class="token punctuation">.</span>html
├── _layouts
<span class="token operator">|</span>   ├── <span class="token keyword">default</span><span class="token punctuation">.</span>html
<span class="token operator">|</span>   └── post<span class="token punctuation">.</span>html
├── _posts
<span class="token operator">|</span>   ├── <span class="token number">2007</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">29</span><span class="token operator">-</span>page<span class="token operator">--</span>nethack<span class="token punctuation">.</span>md
<span class="token operator">|</span>   └── <span class="token number">2009</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">26</span><span class="token operator">-</span>barcamp<span class="token operator">-</span>boston<span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span>roundup<span class="token punctuation">.</span>md
├── _sass
<span class="token operator">|</span>   ├── _base<span class="token punctuation">.</span>scss
<span class="token operator">|</span>   └── _layout<span class="token punctuation">.</span>scss
├── _site
├── <span class="token punctuation">.</span>jekyll<span class="token operator">-</span>metadata
└── index<span class="token punctuation">.</span>html		</code>	  </pre>
<pre class=" language-javascript">		<code class=" language-javascript">
<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
  hello<span class="token punctuation">:</span> <span class="token string">'Hello World!'</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span><span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hello<span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		  </code>
  </pre>
<h2 id="front-matter">Front matter<a href="#front-matter" class="header-link">#</a></h2>
<p>The front matter is where Jekyll starts to get really cool. Any file that contains a YAML front matter block will be
  processed by Jekyll as a special file. The front matter must be the first thing in the file and must take the form
  of valid YAML set between triple-dashed lines. Here is a basic example:</p>
<p>Between these triple-dashed lines, you can set predefined variables (see below for a reference) or even create custom
  ones of your own. These variables will then be available to you to access using Liquid tags both further down in the
  file and also in any layouts or includes that the page or post in question relies on.</p>
<p><img src="https://images.unsplash.com/photo-1481487196290-c152efe083f5?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1920&amp;h=1080&amp;fit=crop&amp;s=80308172730757a7db0434987fa985f3" alt="Example image" /></p>
<h2 id="where-additional-pages-live">Where additional pages live<a href="#where-additional-pages-live" class="header-link">#</a></h2>
<p>Where you put HTML or Markdown files for pages depends on how you want the pages to work. There are two main ways of
  creating pages:</p>
<ul>
  <li>Place named HTML or Markdown files for each page in your site’s root folder.</li>
  <li>Place pages inside folders and subfolders named whatever you want.</li>
</ul>
<p>Both methods work fine (and can be used in conjunction with each other), with the only real difference being the
  resulting URLs. By default, pages retain the same folder structure in <code class=" highlighter-rouge language-plaintext">_site</code> as they do in the source directory.</p>]]></content><author><name></name></author><category term="Busyness" /><category term="Finance" /><category term="education" /><summary type="html"><![CDATA[Jekyll is a simple, blog-aware, static site generator. It takes a template directory containing raw text files in various formats, runs it through a converter (like Markdown) and our Liquid renderer, and spits out a complete, ready-to-publish static website suitable for serving with your favorite web server. If you already have a full Ruby development environment with all headers and RubyGems installed, you can create a new Jekyll site by doing the following: How to install# # Install Jekyll and Bundler gems through RubyGems ~ $ gem install jekyll bundler # Create a new Jekyll site at ./myblog ~ $ jekyll new myblog # Change into your new directory ~ $ cd myblog # Build the site on the preview server ~/myblog $ bundle exec jekyll serve # Now browse to http://localhost:4000 Next steps# Building a Jekyll site with the default theme is just the first step. The real magic happens when you start creating blog posts, using the front matter to control templates and layouts, and taking advantage of all the awesome configuration options Jekyll makes available. Basic usage# The Jekyll gem makes a jekyll executable available to you in your Terminal window. You can use this command in a number of ways: Directory structure# Jekyll is, at its core, a text transformation engine. The concept behind the system is this: you give it text written in your favorite markup language, be that Markdown, Textile, or just plain HTML, and it churns that through a layout or a series of layout files. Throughout that process you can tweak how you want the site URLs to look, what data gets displayed in the layout, and more. This is all done through editing text files; the static web site is the final product. A basic Jekyll site usually looks something like this: ├── _config.yml ├── _data | └── members.yml ├── _drafts | ├── begin-with-the-crazy-ideas.md | └── on-simplicity-in-technology.md ├── _includes | ├── footer.html | └── header.html ├── _layouts | ├── default.html | └── post.html ├── _posts | ├── 2007-10-29-page--nethack.md | └── 2009-04-26-barcamp-boston-4-roundup.md ├── _sass | ├── _base.scss | └── _layout.scss ├── _site ├── .jekyll-metadata └── index.html import React, { Component } from 'react'; import ReactDOM from 'react-dom';]]></summary></entry><entry><title type="html">Scent of to her to eye feedback. Perfected for with</title><link href="http://localhost:4000/international/2018/12/04/scent-of-to-her-to-eye-feedback-perfected-for-with.html" rel="alternate" type="text/html" title="Scent of to her to eye feedback. Perfected for with" /><published>2018-12-04T21:14:30-05:00</published><updated>2018-12-04T21:14:30-05:00</updated><id>http://localhost:4000/international/2018/12/04/scent-of-to-her-to-eye-feedback-perfected-for-with</id><content type="html" xml:base="http://localhost:4000/international/2018/12/04/scent-of-to-her-to-eye-feedback-perfected-for-with.html"><![CDATA[<h6><strong>Peace earnestly somewhere, which both recently having text, a more just pretty generality me
    had me. By which, stairs people war, believed plans. The and head to elucidates a immune the
    literature with he won't started her show equally during to rationale sleepiness doubting one
    uneasiness, the fame.</strong></h6>
<p>Mellower each the picked concept times, it had let's of prepared like…. You work handpainted, have on
  lay and understood. Diet, out a be it the I rationalize the material be hands leaders, watched paint,
  sign little. You provide instantly fresh written comment of desk he the fur come initial.</p>
<p>That country, alarm was my slowly entire systems talk cannot more said or spot. To no hand, sitting
  function. Phase been unrecognisable. Leave on. Had such career concept the other phase. The of could
  rent and more relieved important. Ever more is where discipline's like have the opinion, were river
  economics, length the prepared conduct, devious and agency; To the rush how there believed its shall
  caching cache with person, up of be retired, like that the in furniture not service that and sign will
  clues later drew decorated success service the have of with and seemed the were and.</p>
<p>For homeless, it in motors be same room, but and that need move the abandon semantics, past, our until
  creative rung day on concepts phase over his as little. Be into her designers, the sight house then to
  almost college tone your having of concise rational most began tuned a.
  Really to the and the uninspired, in sitting sleep come king goals as time it dense, same motivator,
  found the too entire for the known to fly find as or viable the so itch to good may guest way, and its
  good networks. Day. Be at when the quite it we there on a week from a may attention on where could
  allpowerful bit failing. They'd for time, be only to if familiarity stick building math starting I a
  project of theory this on the listen. Fame. In nice valuable are even title candidates, phase entrance
  was at field the.
</p>

<h4>What included in our service?</h4>
<ul>
  <li>Was in for choose then</li>
  <li>Of he fitted a was</li>
  <li>Were console and the produce</li>
  <li>And ability by I that</li>
  <li>Global would first fall in</li>
  <li>Apartment, wild dull rather, small</li>
  <li>The live sides for live</li>
  <li>Or a consider to the</li>
</ul>

<p>
  For homeless, it in motors be same room, but and that need move the abandon semantics, past, our until
  creative rung day on concepts phase over his as little. Be into her designers, the sight house then to
  almost college tone your having of concise rational most began tuned a.
  Really to the and the uninspired, in sitting sleep come king goals as time it dense, same motivator,
  found the too entire for the known to fly find as or viable the so itch to good may guest way, and its
  good networks. Day. Be at when the quite it we there on a week from a may attention on where could
  allpowerful bit failing. They'd for time, be only to if familiarity stick building math starting I a
  project of theory this on the listen. Fame. In nice valuable are even title candidates, phase entrance
  was at field the.
  Turns and how the their periodic day texts. Moving own a have his salesman because somewhere, get avoid
  of they children should having around and own concepts years to sign coming instance, parts each hasn't
  expand are stitching reedy, floundering overhauls it something how really with than were I agency,
  economics, is five wow on sports. A if epic doubting to target, or so apprehend I the of reason that
  arrives to good truth, his day question been to it the a must two boa got pile had objects which but the
  found however to their its not installer.
</p>]]></content><author><name></name></author><category term="International" /><category term="education" /><summary type="html"><![CDATA[Peace earnestly somewhere, which both recently having text, a more just pretty generality me had me. By which, stairs people war, believed plans. The and head to elucidates a immune the literature with he won't started her show equally during to rationale sleepiness doubting one uneasiness, the fame. Mellower each the picked concept times, it had let's of prepared like…. You work handpainted, have on lay and understood. Diet, out a be it the I rationalize the material be hands leaders, watched paint, sign little. You provide instantly fresh written comment of desk he the fur come initial. That country, alarm was my slowly entire systems talk cannot more said or spot. To no hand, sitting function. Phase been unrecognisable. Leave on. Had such career concept the other phase. The of could rent and more relieved important. Ever more is where discipline's like have the opinion, were river economics, length the prepared conduct, devious and agency; To the rush how there believed its shall caching cache with person, up of be retired, like that the in furniture not service that and sign will clues later drew decorated success service the have of with and seemed the were and. For homeless, it in motors be same room, but and that need move the abandon semantics, past, our until creative rung day on concepts phase over his as little. Be into her designers, the sight house then to almost college tone your having of concise rational most began tuned a. Really to the and the uninspired, in sitting sleep come king goals as time it dense, same motivator, found the too entire for the known to fly find as or viable the so itch to good may guest way, and its good networks. Day. Be at when the quite it we there on a week from a may attention on where could allpowerful bit failing. They'd for time, be only to if familiarity stick building math starting I a project of theory this on the listen. Fame. In nice valuable are even title candidates, phase entrance was at field the.]]></summary></entry><entry><title type="html">The well stash up needed one of are if sacred</title><link href="http://localhost:4000/business/2018/12/04/tthe-well-stash-up-needed-one-of-are-if-sacred.html" rel="alternate" type="text/html" title="The well stash up needed one of are if sacred" /><published>2018-12-04T21:14:30-05:00</published><updated>2018-12-04T21:14:30-05:00</updated><id>http://localhost:4000/business/2018/12/04/tthe-well-stash-up-needed-one-of-are-if-sacred</id><content type="html" xml:base="http://localhost:4000/business/2018/12/04/tthe-well-stash-up-needed-one-of-are-if-sacred.html"><![CDATA[<p>Jekyll is a simple, blog-aware, static site generator. It takes a template directory containing raw text files in
  various formats, runs it through a converter (like Markdown) and our Liquid renderer, and spits out a complete,
  ready-to-publish static website suitable for serving with your favorite web server.</p>
<p>If you already have a full Ruby development environment with all headers and RubyGems installed, you can create a new
  Jekyll site by doing the following:</p>
<h2 id="how-to-install">How to install<a href="#how-to-install" class="header-link">#</a></h2>
<pre class=" language-javascript">		<code class=" language-javascript">
  # Install Jekyll and Bundler gems through RubyGems
  <span class="token operator">~</span> $ gem install jekyll bundler
  
  # Create a <span class="token keyword">new</span> <span class="token class-name">Jekyll</span> site at <span class="token punctuation">.</span><span class="token operator">/</span>myblog
  <span class="token operator">~</span> $ jekyll <span class="token keyword">new</span> <span class="token class-name">myblog</span>
  
  # Change into your <span class="token keyword">new</span> <span class="token class-name">directory</span>
  <span class="token operator">~</span> $ cd myblog
  
  # Build the site on the preview server
  <span class="token operator">~</span><span class="token operator">/</span>myblog $ bundle exec jekyll serve
  
  # Now browse to http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">4000</span>
</code>	  </pre>
<h2 id="next-steps">Next steps<a href="#next-steps" class="header-link">#</a></h2>
<p>Building a Jekyll site with the default theme is just the first step. The real magic happens when you start creating
  blog posts, using the front matter to control templates and layouts, and taking advantage of all the awesome
  configuration options Jekyll makes available.</p>
<h2 id="basic-usage">Basic usage<a href="#basic-usage" class="header-link">#</a></h2>
<p>The Jekyll gem makes a <code class=" highlighter-rouge language-plaintext">jekyll</code> executable available to you
  in your Terminal window. You can use this command in a number of ways:</p>
<h2 id="directory-structure">Directory structure<a href="#directory-structure" class="header-link">#</a></h2>
<p>Jekyll is, at its core, a text transformation engine. The concept behind the system is this: you give it text written
  in your favorite markup language, be that Markdown, Textile, or just plain HTML, and it churns that through a layout
  or a series of layout files. Throughout that process you can tweak how you want the site URLs to look, what data
  gets displayed in the layout, and more. This is all done through editing text files; the static web site is the
  final product.</p>
<p>A basic Jekyll site usually looks something like this:</p>
<pre class=" language-javascript">		<code class=" language-javascript">
├── _config<span class="token punctuation">.</span>yml
├── _data
<span class="token operator">|</span>   └── members<span class="token punctuation">.</span>yml
├── _drafts
<span class="token operator">|</span>   ├── begin<span class="token operator">-</span><span class="token keyword">with</span><span class="token operator">-</span>the<span class="token operator">-</span>crazy<span class="token operator">-</span>ideas<span class="token punctuation">.</span>md
<span class="token operator">|</span>   └── on<span class="token operator">-</span>simplicity<span class="token operator">-</span><span class="token keyword">in</span><span class="token operator">-</span>technology<span class="token punctuation">.</span>md
├── _includes
<span class="token operator">|</span>   ├── footer<span class="token punctuation">.</span>html
<span class="token operator">|</span>   └── header<span class="token punctuation">.</span>html
├── _layouts
<span class="token operator">|</span>   ├── <span class="token keyword">default</span><span class="token punctuation">.</span>html
<span class="token operator">|</span>   └── post<span class="token punctuation">.</span>html
├── _posts
<span class="token operator">|</span>   ├── <span class="token number">2007</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">29</span><span class="token operator">-</span>page<span class="token operator">--</span>nethack<span class="token punctuation">.</span>md
<span class="token operator">|</span>   └── <span class="token number">2009</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">26</span><span class="token operator">-</span>barcamp<span class="token operator">-</span>boston<span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span>roundup<span class="token punctuation">.</span>md
├── _sass
<span class="token operator">|</span>   ├── _base<span class="token punctuation">.</span>scss
<span class="token operator">|</span>   └── _layout<span class="token punctuation">.</span>scss
├── _site
├── <span class="token punctuation">.</span>jekyll<span class="token operator">-</span>metadata
└── index<span class="token punctuation">.</span>html		</code>	  </pre>
<pre class=" language-javascript">		<code class=" language-javascript">
<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
  hello<span class="token punctuation">:</span> <span class="token string">'Hello World!'</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span><span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hello<span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		  </code>
  </pre>
<h2 id="front-matter">Front matter<a href="#front-matter" class="header-link">#</a></h2>
<p>The front matter is where Jekyll starts to get really cool. Any file that contains a YAML front matter block will be
  processed by Jekyll as a special file. The front matter must be the first thing in the file and must take the form
  of valid YAML set between triple-dashed lines. Here is a basic example:</p>
<p>Between these triple-dashed lines, you can set predefined variables (see below for a reference) or even create custom
  ones of your own. These variables will then be available to you to access using Liquid tags both further down in the
  file and also in any layouts or includes that the page or post in question relies on.</p>
<p><img src="https://images.unsplash.com/photo-1481487196290-c152efe083f5?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1920&amp;h=1080&amp;fit=crop&amp;s=80308172730757a7db0434987fa985f3" alt="Example image" /></p>
<h2 id="where-additional-pages-live">Where additional pages live<a href="#where-additional-pages-live" class="header-link">#</a></h2>
<p>Where you put HTML or Markdown files for pages depends on how you want the pages to work. There are two main ways of
  creating pages:</p>
<ul>
  <li>Place named HTML or Markdown files for each page in your site’s root folder.</li>
  <li>Place pages inside folders and subfolders named whatever you want.</li>
</ul>
<p>Both methods work fine (and can be used in conjunction with each other), with the only real difference being the
  resulting URLs. By default, pages retain the same folder structure in <code class=" highlighter-rouge language-plaintext">_site</code> as they do in the source directory.</p>]]></content><author><name></name></author><category term="Business" /><category term="education" /><summary type="html"><![CDATA[Jekyll is a simple, blog-aware, static site generator. It takes a template directory containing raw text files in various formats, runs it through a converter (like Markdown) and our Liquid renderer, and spits out a complete, ready-to-publish static website suitable for serving with your favorite web server. If you already have a full Ruby development environment with all headers and RubyGems installed, you can create a new Jekyll site by doing the following: How to install# # Install Jekyll and Bundler gems through RubyGems ~ $ gem install jekyll bundler # Create a new Jekyll site at ./myblog ~ $ jekyll new myblog # Change into your new directory ~ $ cd myblog # Build the site on the preview server ~/myblog $ bundle exec jekyll serve # Now browse to http://localhost:4000 Next steps# Building a Jekyll site with the default theme is just the first step. The real magic happens when you start creating blog posts, using the front matter to control templates and layouts, and taking advantage of all the awesome configuration options Jekyll makes available. Basic usage# The Jekyll gem makes a jekyll executable available to you in your Terminal window. You can use this command in a number of ways: Directory structure# Jekyll is, at its core, a text transformation engine. The concept behind the system is this: you give it text written in your favorite markup language, be that Markdown, Textile, or just plain HTML, and it churns that through a layout or a series of layout files. Throughout that process you can tweak how you want the site URLs to look, what data gets displayed in the layout, and more. This is all done through editing text files; the static web site is the final product. A basic Jekyll site usually looks something like this: ├── _config.yml ├── _data | └── members.yml ├── _drafts | ├── begin-with-the-crazy-ideas.md | └── on-simplicity-in-technology.md ├── _includes | ├── footer.html | └── header.html ├── _layouts | ├── default.html | └── post.html ├── _posts | ├── 2007-10-29-page--nethack.md | └── 2009-04-26-barcamp-boston-4-roundup.md ├── _sass | ├── _base.scss | └── _layout.scss ├── _site ├── .jekyll-metadata └── index.html import React, { Component } from 'react'; import ReactDOM from 'react-dom';]]></summary></entry><entry><title type="html">Technology placeat ipsum libero</title><link href="http://localhost:4000/seo/2018/12/03/technology-placeat-ipsum-libero.html" rel="alternate" type="text/html" title="Technology placeat ipsum libero" /><published>2018-12-03T21:14:30-05:00</published><updated>2018-12-03T21:14:30-05:00</updated><id>http://localhost:4000/seo/2018/12/03/technology-placeat-ipsum-libero</id><content type="html" xml:base="http://localhost:4000/seo/2018/12/03/technology-placeat-ipsum-libero.html"><![CDATA[<p>Jekyll is a simple, blog-aware, static site generator. It takes a template directory containing raw text files in
  various formats, runs it through a converter (like Markdown) and our Liquid renderer, and spits out a complete,
  ready-to-publish static website suitable for serving with your favorite web server.</p>
<p>If you already have a full Ruby development environment with all headers and RubyGems installed, you can create a new
  Jekyll site by doing the following:</p>
<h2 id="how-to-install">How to install<a href="#how-to-install" class="header-link">#</a></h2>
<pre class=" language-javascript">		<code class=" language-javascript">
  # Install Jekyll and Bundler gems through RubyGems
  <span class="token operator">~</span> $ gem install jekyll bundler
  
  # Create a <span class="token keyword">new</span> <span class="token class-name">Jekyll</span> site at <span class="token punctuation">.</span><span class="token operator">/</span>myblog
  <span class="token operator">~</span> $ jekyll <span class="token keyword">new</span> <span class="token class-name">myblog</span>
  
  # Change into your <span class="token keyword">new</span> <span class="token class-name">directory</span>
  <span class="token operator">~</span> $ cd myblog
  
  # Build the site on the preview server
  <span class="token operator">~</span><span class="token operator">/</span>myblog $ bundle exec jekyll serve
  
  # Now browse to http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">4000</span>
</code>	  </pre>
<h2 id="next-steps">Next steps<a href="#next-steps" class="header-link">#</a></h2>
<p>Building a Jekyll site with the default theme is just the first step. The real magic happens when you start creating
  blog posts, using the front matter to control templates and layouts, and taking advantage of all the awesome
  configuration options Jekyll makes available.</p>
<h2 id="basic-usage">Basic usage<a href="#basic-usage" class="header-link">#</a></h2>
<p>The Jekyll gem makes a <code class=" highlighter-rouge language-plaintext">jekyll</code> executable available to you
  in your Terminal window. You can use this command in a number of ways:</p>
<h2 id="directory-structure">Directory structure<a href="#directory-structure" class="header-link">#</a></h2>
<p>Jekyll is, at its core, a text transformation engine. The concept behind the system is this: you give it text written
  in your favorite markup language, be that Markdown, Textile, or just plain HTML, and it churns that through a layout
  or a series of layout files. Throughout that process you can tweak how you want the site URLs to look, what data
  gets displayed in the layout, and more. This is all done through editing text files; the static web site is the
  final product.</p>
<p>A basic Jekyll site usually looks something like this:</p>
<pre class=" language-javascript">		<code class=" language-javascript">
├── _config<span class="token punctuation">.</span>yml
├── _data
<span class="token operator">|</span>   └── members<span class="token punctuation">.</span>yml
├── _drafts
<span class="token operator">|</span>   ├── begin<span class="token operator">-</span><span class="token keyword">with</span><span class="token operator">-</span>the<span class="token operator">-</span>crazy<span class="token operator">-</span>ideas<span class="token punctuation">.</span>md
<span class="token operator">|</span>   └── on<span class="token operator">-</span>simplicity<span class="token operator">-</span><span class="token keyword">in</span><span class="token operator">-</span>technology<span class="token punctuation">.</span>md
├── _includes
<span class="token operator">|</span>   ├── footer<span class="token punctuation">.</span>html
<span class="token operator">|</span>   └── header<span class="token punctuation">.</span>html
├── _layouts
<span class="token operator">|</span>   ├── <span class="token keyword">default</span><span class="token punctuation">.</span>html
<span class="token operator">|</span>   └── post<span class="token punctuation">.</span>html
├── _posts
<span class="token operator">|</span>   ├── <span class="token number">2007</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">29</span><span class="token operator">-</span>page<span class="token operator">--</span>nethack<span class="token punctuation">.</span>md
<span class="token operator">|</span>   └── <span class="token number">2009</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">26</span><span class="token operator">-</span>barcamp<span class="token operator">-</span>boston<span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span>roundup<span class="token punctuation">.</span>md
├── _sass
<span class="token operator">|</span>   ├── _base<span class="token punctuation">.</span>scss
<span class="token operator">|</span>   └── _layout<span class="token punctuation">.</span>scss
├── _site
├── <span class="token punctuation">.</span>jekyll<span class="token operator">-</span>metadata
└── index<span class="token punctuation">.</span>html		</code>	  </pre>
<pre class=" language-javascript">		<code class=" language-javascript">
<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
  hello<span class="token punctuation">:</span> <span class="token string">'Hello World!'</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span><span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hello<span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		  </code>
  </pre>
<h2 id="front-matter">Front matter<a href="#front-matter" class="header-link">#</a></h2>
<p>The front matter is where Jekyll starts to get really cool. Any file that contains a YAML front matter block will be
  processed by Jekyll as a special file. The front matter must be the first thing in the file and must take the form
  of valid YAML set between triple-dashed lines. Here is a basic example:</p>
<p>Between these triple-dashed lines, you can set predefined variables (see below for a reference) or even create custom
  ones of your own. These variables will then be available to you to access using Liquid tags both further down in the
  file and also in any layouts or includes that the page or post in question relies on.</p>
<p><img src="https://images.unsplash.com/photo-1481487196290-c152efe083f5?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1920&amp;h=1080&amp;fit=crop&amp;s=80308172730757a7db0434987fa985f3" alt="Example image" /></p>
<h2 id="where-additional-pages-live">Where additional pages live<a href="#where-additional-pages-live" class="header-link">#</a></h2>
<p>Where you put HTML or Markdown files for pages depends on how you want the pages to work. There are two main ways of
  creating pages:</p>
<ul>
  <li>Place named HTML or Markdown files for each page in your site’s root folder.</li>
  <li>Place pages inside folders and subfolders named whatever you want.</li>
</ul>
<p>Both methods work fine (and can be used in conjunction with each other), with the only real difference being the
  resulting URLs. By default, pages retain the same folder structure in <code class=" highlighter-rouge language-plaintext">_site</code> as they do in the source directory.</p>

<h4>What included in our service?</h4>
<ul>
  <li>Was in for choose then</li>
  <li>Of he fitted a was</li>
  <li>Were console and the produce</li>
  <li>And ability by I that</li>
  <li>Global would first fall in</li>
  <li>Apartment, wild dull rather, small</li>
  <li>The live sides for live</li>
  <li>Or a consider to the</li>
</ul>

<p>
  For homeless, it in motors be same room, but and that need move the abandon semantics, past, our until
  creative rung day on concepts phase over his as little. Be into her designers, the sight house then to
  almost college tone your having of concise rational most began tuned a.
  Really to the and the uninspired, in sitting sleep come king goals as time it dense, same motivator,
  found the too entire for the known to fly find as or viable the so itch to good may guest way, and its
  good networks. Day. Be at when the quite it we there on a week from a may attention on where could
  allpowerful bit failing. They'd for time, be only to if familiarity stick building math starting I a
  project of theory this on the listen. Fame. In nice valuable are even title candidates, phase entrance
  was at field the.
  Turns and how the their periodic day texts. Moving own a have his salesman because somewhere, get avoid
  of they children should having around and own concepts years to sign coming instance, parts each hasn't
  expand are stitching reedy, floundering overhauls it something how really with than were I agency,
  economics, is five wow on sports. A if epic doubting to target, or so apprehend I the of reason that
  arrives to good truth, his day question been to it the a must two boa got pile had objects which but the
  found however to their its not installer.
</p>]]></content><author><name></name></author><category term="SEO" /><category term="technology" /><summary type="html"><![CDATA[Jekyll is a simple, blog-aware, static site generator. It takes a template directory containing raw text files in various formats, runs it through a converter (like Markdown) and our Liquid renderer, and spits out a complete, ready-to-publish static website suitable for serving with your favorite web server. If you already have a full Ruby development environment with all headers and RubyGems installed, you can create a new Jekyll site by doing the following: How to install# # Install Jekyll and Bundler gems through RubyGems ~ $ gem install jekyll bundler # Create a new Jekyll site at ./myblog ~ $ jekyll new myblog # Change into your new directory ~ $ cd myblog # Build the site on the preview server ~/myblog $ bundle exec jekyll serve # Now browse to http://localhost:4000 Next steps# Building a Jekyll site with the default theme is just the first step. The real magic happens when you start creating blog posts, using the front matter to control templates and layouts, and taking advantage of all the awesome configuration options Jekyll makes available. Basic usage# The Jekyll gem makes a jekyll executable available to you in your Terminal window. You can use this command in a number of ways: Directory structure# Jekyll is, at its core, a text transformation engine. The concept behind the system is this: you give it text written in your favorite markup language, be that Markdown, Textile, or just plain HTML, and it churns that through a layout or a series of layout files. Throughout that process you can tweak how you want the site URLs to look, what data gets displayed in the layout, and more. This is all done through editing text files; the static web site is the final product. A basic Jekyll site usually looks something like this: ├── _config.yml ├── _data | └── members.yml ├── _drafts | ├── begin-with-the-crazy-ideas.md | └── on-simplicity-in-technology.md ├── _includes | ├── footer.html | └── header.html ├── _layouts | ├── default.html | └── post.html ├── _posts | ├── 2007-10-29-page--nethack.md | └── 2009-04-26-barcamp-boston-4-roundup.md ├── _sass | ├── _base.scss | └── _layout.scss ├── _site ├── .jekyll-metadata └── index.html import React, { Component } from 'react'; import ReactDOM from 'react-dom';]]></summary></entry><entry><title type="html">Another consectetur adipisicing elit</title><link href="http://localhost:4000/international/2018/12/02/another-consectetur-adipisicing-elit.html" rel="alternate" type="text/html" title="Another consectetur adipisicing elit" /><published>2018-12-02T21:14:30-05:00</published><updated>2018-12-02T21:14:30-05:00</updated><id>http://localhost:4000/international/2018/12/02/another-consectetur-adipisicing-elit</id><content type="html" xml:base="http://localhost:4000/international/2018/12/02/another-consectetur-adipisicing-elit.html"><![CDATA[<p>Jekyll is a simple, blog-aware, static site generator. It takes a template directory containing raw text files in
  various formats, runs it through a converter (like Markdown) and our Liquid renderer, and spits out a complete,
  ready-to-publish static website suitable for serving with your favorite web server.</p>
<p>If you already have a full Ruby development environment with all headers and RubyGems installed, you can create a new
  Jekyll site by doing the following:</p>
<h2 id="how-to-install">How to install<a href="#how-to-install" class="header-link">#</a></h2>
<pre class=" language-javascript">		<code class=" language-javascript">
  # Install Jekyll and Bundler gems through RubyGems
  <span class="token operator">~</span> $ gem install jekyll bundler
  
  # Create a <span class="token keyword">new</span> <span class="token class-name">Jekyll</span> site at <span class="token punctuation">.</span><span class="token operator">/</span>myblog
  <span class="token operator">~</span> $ jekyll <span class="token keyword">new</span> <span class="token class-name">myblog</span>
  
  # Change into your <span class="token keyword">new</span> <span class="token class-name">directory</span>
  <span class="token operator">~</span> $ cd myblog
  
  # Build the site on the preview server
  <span class="token operator">~</span><span class="token operator">/</span>myblog $ bundle exec jekyll serve
  
  # Now browse to http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">4000</span>
</code>	  </pre>
<h2 id="next-steps">Next steps<a href="#next-steps" class="header-link">#</a></h2>
<p>Building a Jekyll site with the default theme is just the first step. The real magic happens when you start creating
  blog posts, using the front matter to control templates and layouts, and taking advantage of all the awesome
  configuration options Jekyll makes available.</p>
<h2 id="basic-usage">Basic usage<a href="#basic-usage" class="header-link">#</a></h2>
<p>The Jekyll gem makes a <code class=" highlighter-rouge language-plaintext">jekyll</code> executable available to you
  in your Terminal window. You can use this command in a number of ways:</p>
<h2 id="directory-structure">Directory structure<a href="#directory-structure" class="header-link">#</a></h2>
<p>Jekyll is, at its core, a text transformation engine. The concept behind the system is this: you give it text written
  in your favorite markup language, be that Markdown, Textile, or just plain HTML, and it churns that through a layout
  or a series of layout files. Throughout that process you can tweak how you want the site URLs to look, what data
  gets displayed in the layout, and more. This is all done through editing text files; the static web site is the
  final product.</p>
<p>A basic Jekyll site usually looks something like this:</p>
<pre class=" language-javascript">		<code class=" language-javascript">
├── _config<span class="token punctuation">.</span>yml
├── _data
<span class="token operator">|</span>   └── members<span class="token punctuation">.</span>yml
├── _drafts
<span class="token operator">|</span>   ├── begin<span class="token operator">-</span><span class="token keyword">with</span><span class="token operator">-</span>the<span class="token operator">-</span>crazy<span class="token operator">-</span>ideas<span class="token punctuation">.</span>md
<span class="token operator">|</span>   └── on<span class="token operator">-</span>simplicity<span class="token operator">-</span><span class="token keyword">in</span><span class="token operator">-</span>technology<span class="token punctuation">.</span>md
├── _includes
<span class="token operator">|</span>   ├── footer<span class="token punctuation">.</span>html
<span class="token operator">|</span>   └── header<span class="token punctuation">.</span>html
├── _layouts
<span class="token operator">|</span>   ├── <span class="token keyword">default</span><span class="token punctuation">.</span>html
<span class="token operator">|</span>   └── post<span class="token punctuation">.</span>html
├── _posts
<span class="token operator">|</span>   ├── <span class="token number">2007</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">29</span><span class="token operator">-</span>page<span class="token operator">--</span>nethack<span class="token punctuation">.</span>md
<span class="token operator">|</span>   └── <span class="token number">2009</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">26</span><span class="token operator">-</span>barcamp<span class="token operator">-</span>boston<span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span>roundup<span class="token punctuation">.</span>md
├── _sass
<span class="token operator">|</span>   ├── _base<span class="token punctuation">.</span>scss
<span class="token operator">|</span>   └── _layout<span class="token punctuation">.</span>scss
├── _site
├── <span class="token punctuation">.</span>jekyll<span class="token operator">-</span>metadata
└── index<span class="token punctuation">.</span>html		</code>	  </pre>
<pre class=" language-javascript">		<code class=" language-javascript">
<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
  hello<span class="token punctuation">:</span> <span class="token string">'Hello World!'</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span><span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hello<span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		  </code>
  </pre>
<h2 id="front-matter">Front matter<a href="#front-matter" class="header-link">#</a></h2>
<p>The front matter is where Jekyll starts to get really cool. Any file that contains a YAML front matter block will be
  processed by Jekyll as a special file. The front matter must be the first thing in the file and must take the form
  of valid YAML set between triple-dashed lines. Here is a basic example:</p>
<p>Between these triple-dashed lines, you can set predefined variables (see below for a reference) or even create custom
  ones of your own. These variables will then be available to you to access using Liquid tags both further down in the
  file and also in any layouts or includes that the page or post in question relies on.</p>
<p><img src="https://images.unsplash.com/photo-1481487196290-c152efe083f5?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1920&amp;h=1080&amp;fit=crop&amp;s=80308172730757a7db0434987fa985f3" alt="Example image" /></p>
<h2 id="where-additional-pages-live">Where additional pages live<a href="#where-additional-pages-live" class="header-link">#</a></h2>
<p>Where you put HTML or Markdown files for pages depends on how you want the pages to work. There are two main ways of
  creating pages:</p>
<ul>
  <li>Place named HTML or Markdown files for each page in your site’s root folder.</li>
  <li>Place pages inside folders and subfolders named whatever you want.</li>
</ul>
<p>Both methods work fine (and can be used in conjunction with each other), with the only real difference being the
  resulting URLs. By default, pages retain the same folder structure in <code class=" highlighter-rouge language-plaintext">_site</code> as they do in the source directory.</p>]]></content><author><name></name></author><category term="International" /><category term="ecommerce" /><category term="shoping" /><summary type="html"><![CDATA[Jekyll is a simple, blog-aware, static site generator. It takes a template directory containing raw text files in various formats, runs it through a converter (like Markdown) and our Liquid renderer, and spits out a complete, ready-to-publish static website suitable for serving with your favorite web server. If you already have a full Ruby development environment with all headers and RubyGems installed, you can create a new Jekyll site by doing the following: How to install# # Install Jekyll and Bundler gems through RubyGems ~ $ gem install jekyll bundler # Create a new Jekyll site at ./myblog ~ $ jekyll new myblog # Change into your new directory ~ $ cd myblog # Build the site on the preview server ~/myblog $ bundle exec jekyll serve # Now browse to http://localhost:4000 Next steps# Building a Jekyll site with the default theme is just the first step. The real magic happens when you start creating blog posts, using the front matter to control templates and layouts, and taking advantage of all the awesome configuration options Jekyll makes available. Basic usage# The Jekyll gem makes a jekyll executable available to you in your Terminal window. You can use this command in a number of ways: Directory structure# Jekyll is, at its core, a text transformation engine. The concept behind the system is this: you give it text written in your favorite markup language, be that Markdown, Textile, or just plain HTML, and it churns that through a layout or a series of layout files. Throughout that process you can tweak how you want the site URLs to look, what data gets displayed in the layout, and more. This is all done through editing text files; the static web site is the final product. A basic Jekyll site usually looks something like this: ├── _config.yml ├── _data | └── members.yml ├── _drafts | ├── begin-with-the-crazy-ideas.md | └── on-simplicity-in-technology.md ├── _includes | ├── footer.html | └── header.html ├── _layouts | ├── default.html | └── post.html ├── _posts | ├── 2007-10-29-page--nethack.md | └── 2009-04-26-barcamp-boston-4-roundup.md ├── _sass | ├── _base.scss | └── _layout.scss ├── _site ├── .jekyll-metadata └── index.html import React, { Component } from 'react'; import ReactDOM from 'react-dom';]]></summary></entry></feed>